name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      if: false
      with: { python-version: "3.8" }

    - name: Install codespell
      if: false
      run: pip3 install codespell

    - name: Lint
      if: false
      run: cmake -D FORMAT_COMMAND=clang-format-12 -P cmake/lint.cmake

    - name: Spell check
      if: false
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-latest

    # To enable coverage, delete the last line from the conditional below and
    # edit the "RasterDuck" placeholder to your GitHub name.
    # If you do not wish to use codecov, then simply delete this job from the
    # workflow.
    if: github.repository_owner == 'RasterDuck'
      && false

    steps:
    - uses: actions/checkout@v2

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v1
      with:
        file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # - name: Configure
    #   env: { CXX: clang++-12 }
    #   run: cmake --preset=ci-sanitize

    # - name: Build
    #   run: cmake --build build/sanitize -j 2

    # - name: Test
    #   working-directory: build/sanitize
    #   env:
    #     ASAN_OPTIONS: "strict_string_checks=1:\
    #       detect_stack_use_after_return=1:\
    #       check_initialization_order=1:\
    #       strict_init_order=1:\
    #       detect_leaks=1"
    #     UBSAN_OPTIONS: print_stacktrace=1
    #   run: ctest --output-on-failure -j 2

  benchmark:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-2022] # macos-latest

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install clang-tidy cppcheck -y -q

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Run Benchmark
      if: matrix.os == 'windows-2022'
      shell: cmd
      working-directory: build/Release
      run: |
        set OS_NAME=
        set OS_VERSION=
        set CPU_NAME=
    
        REM Capture OS Name
        for /f "tokens=2*" %%i in ('systeminfo ^| findstr /B /C:"OS Name"') do (
            set OS_NAME=%%j
        )
    
        REM Capture OS Version
        for /f "tokens=2*" %%i in ('systeminfo ^| findstr /B /C:"OS Version"') do (
            set OS_VERSION=%%j
        )
    
        REM Capture CPU Name
        for /f "tokens=2 delims==" %%i in ('wmic cpu get name /value') do (
            set CPU_NAME=%%i
        )
        
        echo # Benchmark Results (windows-2022) > BENCHMARK.md
        echo. >> BENCHMARK.md
        
        echo ## System Info >> BENCHMARK.md
        echo CPU: %CPU_NAME% >> BENCHMARK.md
        echo OS: %OS_NAME% >> BENCHMARK.md
        echo OS Version: %OS_VERSION% >> BENCHMARK.md
    
        echo. >> BENCHMARK.md
    
        echo ## SSE 4.2 >> BENCHMARK.md
        vectormathbench_sse42.exe >> BENCHMARK.md
    
        echo. >> BENCHMARK.md
        echo ## AVX >> BENCHMARK.md
        vectormathbench_avx.exe >> BENCHMARK.md
    
        echo. >> BENCHMARK.md
        echo ## AVX2 >> BENCHMARK.md
        vectormathbench_avx2.exe >> BENCHMARK.md

        cat BENCHMARK.md >> %GITHUB_STEP_SUMMARY%
    
    - name: Run Benchmark
      if: matrix.os == 'ubuntu-latest'
      working-directory: build
      run: |
        echo "# Benchmark Results (ubuntu-latest)" > BENCHMARK.md
        echo "" >> BENCHMARK.md

        echo ## System Info >> BENCHMARK.md
        echo CPU: $(lscpu | grep "Model name" | sed -e 's/Model name: *//') >> BENCHMARK.md
        echo OS: $(lsb_release -d | sed -e 's/Description: *//') >> BENCHMARK.md
        echo OS Version: $(lsb_release -r | sed -e 's/Release: *//') >> BENCHMARK.md
        echo "" >> BENCHMARK.md
        
        echo "## SSE 4.2" >> BENCHMARK.md
        ./vectormathbench_sse42 >> BENCHMARK.md
        echo "" >> BENCHMARK.md
        
        echo "## AVX" >> BENCHMARK.md
        ./vectormathbench_avx >> BENCHMARK.md
        echo "" >> BENCHMARK.md
        
        echo "## AVX2" >> BENCHMARK.md
        ./vectormathbench_avx2 >> BENCHMARK.md

        cat BENCHMARK.md >> $GITHUB_STEP_SUMMARY


  # docs:
  #   # Deploy docs only when builds succeed
  #   needs: [sanitize]

  #   runs-on: ubuntu-latest

  #   # To enable, first you have to create an orphaned gh-pages branch:
  #   #
  #   #    git switch --orphan gh-pages
  #   #    git commit --allow-empty -m "Initial commit"
  #   #    git push -u origin gh-pages
  #   #
  #   # Edit the RasterDuck placeholder below to your GitHub name, so this action
  #   # runs only in your repository and no one else's fork. After these, delete
  #   # this comment and the last line in the conditional below.
  #   # If you do not wish to use GitHub Pages for deploying documentation, then
  #   # simply delete this job similarly to the coverage one.
  #   if: github.ref == 'refs/heads/master'
  #     && github.event_name == 'push'
  #     && github.repository_owner == 'RasterDuck'
  #     && false

  #   steps:
  #   - uses: actions/checkout@v2

  #   - uses: actions/setup-python@v2
  #     with: { python-version: "3.8" }

  #   - name: Install m.css dependencies
  #     run: pip3 install jinja2 Pygments

  #   - name: Install Doxygen
  #     run: sudo apt-get update -q
  #       && sudo apt-get install doxygen -q -y

  #   - name: Build docs
  #     run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
  #       -P cmake/docs-ci.cmake

  #   - name: Deploy docs
  #     uses: peaceiris/actions-gh-pages@v3
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: build/docs/html
